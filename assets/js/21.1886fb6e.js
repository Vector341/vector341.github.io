(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{360:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_4-环境-变量的底层机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-环境-变量的底层机制"}},[t._v("#")]),t._v(" 4 环境：变量的底层机制")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://chatgpt.com/c/67c48d33-d2b0-8004-aa1b-03ff0db64b02#41-%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86%E5%8F%98%E9%87%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84",target:"_blank",rel:"noopener noreferrer"}},[t._v("4.1 环境：管理变量的数据结构"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("4.2 通过环境实现递归\n"),s("ul",[s("li",[s("a",{attrs:{href:"https://chatgpt.com/c/67c48d33-d2b0-8004-aa1b-03ff0db64b02#421-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C",target:"_blank",rel:"noopener noreferrer"}},[t._v("4.2.1 代码执行"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[t._v("4.3 通过环境实现嵌套作用域\n"),s("ul",[s("li",[s("a",{attrs:{href:"https://chatgpt.com/c/67c48d33-d2b0-8004-aa1b-03ff0db64b02#431-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C",target:"_blank",rel:"noopener noreferrer"}},[t._v("4.3.1 代码执行"),s("OutboundLink")],1)])])]),t._v(" "),s("li",[s("a",{attrs:{href:"https://chatgpt.com/c/67c48d33-d2b0-8004-aa1b-03ff0db64b02#44-%E9%97%AD%E5%8C%85%E4%B8%8E%E7%8E%AF%E5%A2%83",target:"_blank",rel:"noopener noreferrer"}},[t._v("4.4 闭包与环境"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("在本章中，我们将深入了解 ECMAScript 语言规范如何处理变量。")]),t._v(" "),s("h2",{attrs:{id:"_4-1-环境-管理变量的数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-环境-管理变量的数据结构"}},[t._v("#")]),t._v(" 4.1 环境：管理变量的数据结构")]),t._v(" "),s("p",[t._v("**环境(Environment Record)"),s("strong",[t._v("是 ECMAScript 规范用于管理变量的数据结构。它是一个字典，键是变量名，值是这些变量的值。每个")]),t._v("作用域(scope)**都有其关联的环境。环境必须能够支持与变量相关的以下现象：")]),t._v(" "),s("ul",[s("li",[t._v("递归 Recursion")]),t._v(" "),s("li",[t._v("嵌套作用域 Nested Scope")]),t._v(" "),s("li",[t._v("闭包 Closure")])]),t._v(" "),s("p",[t._v("我们将通过示例来说明如何处理每种现象。")]),t._v(" "),s("h2",{attrs:{id:"_4-2-通过环境实现递归"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-通过环境实现递归"}},[t._v("#")]),t._v(" 4.2 通过环境实现递归")]),t._v(" "),s("p",[t._v("首先，我们讨论递归。考虑以下代码：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tmp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nassert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("对于每个函数调用，都需要为被调用函数的变量（参数和局部变量）分配新的存储空间。这是通过所谓的**执行上下文栈(execution context stack)"),s("strong",[t._v("来管理的，该栈引用环境（在本章的上下文中）。环境本身存储在")]),t._v("堆(heap)**上。这是必要的，因为它们有时在执行离开其作用域后仍然存在（我们将在探讨闭包时看到这一点）。因此，它们本身不能通过栈来管理。")]),t._v(" "),s("h3",{attrs:{id:"_4-2-1-代码执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1-代码执行"}},[t._v("#")]),t._v(" 4.2.1 代码执行")]),t._v(" "),s("p",[t._v("在执行代码时，我们在以下位置暂停：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 暂停 3")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tmp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 暂停 2")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 暂停 1")]),t._v("\nassert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("g")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("具体过程如下：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("暂停 1")]),t._v(" – 调用 "),s("code",[t._v("g()")]),t._v(" 之前。执行上下文栈有一个条目，指向顶层环境。在该环境中，有两个条目；一个用于 "),s("code",[t._v("f()")]),t._v("，一个用于 "),s("code",[t._v("g()")]),t._v("。")]),t._v(" "),s("li",[s("strong",[t._v("暂停 2")]),t._v(" – 执行 "),s("code",[t._v("g()")]),t._v(" 时。执行上下文栈的顶部指向为 "),s("code",[t._v("g()")]),t._v(" 创建的环境。该环境包含参数 "),s("code",[t._v("y")]),t._v(" 和局部变量 "),s("code",[t._v("tmp")]),t._v(" 的条目。")]),t._v(" "),s("li",[s("strong",[t._v("暂停 3")]),t._v(" – 执行 "),s("code",[t._v("f()")]),t._v(" 时。执行上下文的顶部现在指向 "),s("code",[t._v("f()")]),t._v(" 的环境。")])]),t._v(" "),s("p",[t._v("每次遇到 "),s("code",[t._v("return")]),t._v(" 时，执行上下文栈都会移除一个上下文。")]),t._v(" "),s("p",[t._v("TODO: 补充图片")]),t._v(" "),s("h2",{attrs:{id:"_4-3-通过环境实现嵌套作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-通过环境实现嵌套作用域"}},[t._v("#")]),t._v(" 4.3 通过环境实现嵌套作用域")]),t._v(" "),s("p",[t._v("我们使用以下代码来探讨如何通过环境实现嵌套作用域。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("square")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("square")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nassert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("36")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这里，我们有三个嵌套的作用域：顶层作用域、"),s("code",[t._v("f()")]),t._v(" 的作用域和 "),s("code",[t._v("square()")]),t._v(" 的作用域。观察如下：")]),t._v(" "),s("ul",[s("li",[t._v("这些作用域是相互连接的。内部作用域“继承”外部作用域的所有变量（减去被遮蔽shadowing的变量）。")]),t._v(" "),s("li",[t._v("作为一种机制，嵌套作用域独立于递归。后者最好通过独立环境的栈来管理。前者是每个环境与其创建时所处环境之间的关系。")])]),t._v(" "),s("p",[t._v("因此，每个作用域的环境通过一个名为 "),s("code",[t._v("outer")]),t._v(" 的字段指向外围作用域的环境。当我们查找变量的值时，首先在当前环境中搜索其名称，然后在外部环境中搜索，依此类推。整个外部环境链包含所有当前可访问的变量（减去被遮蔽的变量）。")]),t._v(" "),s("p",[t._v("当你进行函数调用时，会创建一个新的环境。该环境的外部环境是函数创建时的环境。为了帮助设置通过函数调用创建的环境的 "),s("code",[t._v("outer")]),t._v(" 字段，每个函数都有一个名为 "),s("code",[t._v("[[Scope]]")]),t._v(" 的内部属性，指向其“出生环境”。")]),t._v(" "),s("h3",{attrs:{id:"_4-3-1-代码执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-代码执行"}},[t._v("#")]),t._v(" 4.3.1 代码执行")]),t._v(" "),s("p",[t._v("以下是在执行代码时的暂停点：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function f(x) {\n  function square() {\n    const result = x * x;\n    // 暂停 3\n    return result;\n  }\n  // 暂停 2\n  return square();\n}\n// 暂停 1\nassert.equal(f(6), 36);\n")])])]),s("p",[t._v("具体发生的情况如下：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("暂停 1")]),t._v(" – 在调用 "),s("code",[t._v("f()")]),t._v(" 之前（图 4）。")]),t._v(" "),s("li",[s("strong",[t._v("暂停 2")]),t._v(" – 在执行 "),s("code",[t._v("f()")]),t._v(" 期间（图 5）。")]),t._v(" "),s("li",[s("strong",[t._v("暂停 3")]),t._v(" – 在执行 "),s("code",[t._v("square()")]),t._v(" 期间（图 6）。")])]),t._v(" "),s("p",[t._v("在这些步骤之后，"),s("code",[t._v("return")]),t._v(" 语句会依次将执行条目从栈中弹出。")]),t._v(" "),s("p",[s("strong",[t._v("图 4：嵌套作用域，暂停 1 – 调用 "),s("code",[t._v("f()")]),t._v(" 之前")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("graph TD\n  subgraph 顶层环境\n    f[函数 f]\n  end\n  f -.->|[[Scope]]| 顶层环境\n")])])]),s("p",[t._v("顶层环境只有一个条目，即 "),s("code",[t._v("f()")]),t._v("。由于 "),s("code",[t._v("f()")]),t._v(" 的出生环境是顶层环境，因此 "),s("code",[t._v("f")]),t._v(" 的 "),s("code",[t._v("[[Scope]]")]),t._v(" 指向顶层环境。")]),t._v(" "),s("p",[s("strong",[t._v("图 5：嵌套作用域，暂停 2 – 执行 "),s("code",[t._v("f()")]),t._v(" 期间")])]),t._v(" "),s("p",[t._v("现在，"),s("code",[t._v("f(6)")]),t._v(" 的函数调用环境已创建。该环境的外部环境是 "),s("code",[t._v("f()")]),t._v(" 的出生环境（索引 0 处的顶层环境）。可以看到，"),s("code",[t._v("outer")]),t._v(" 字段被设置为 "),s("code",[t._v("f")]),t._v(" 的 "),s("code",[t._v("[[Scope]]")]),t._v(" 的值。此外，新函数 "),s("code",[t._v("square()")]),t._v(" 的 "),s("code",[t._v("[[Scope]]")]),t._v(" 也被设置为刚刚创建的 "),s("code",[t._v("f")]),t._v(" 的环境。")]),t._v(" "),s("p",[s("strong",[t._v("图 6：嵌套作用域，暂停 3 – 执行 "),s("code",[t._v("square()")]),t._v(" 期间")])]),t._v(" "),s("p",[t._v("之前的模式再次出现：最新环境的 "),s("code",[t._v("outer")]),t._v(" 通过我们刚刚调用的函数的 "),s("code",[t._v("[[Scope]]")]),t._v(" 进行设置。通过 "),s("code",[t._v("outer")]),t._v(" 形成的作用域链包含当前所有可访问的变量。例如，我们可以访问 "),s("code",[t._v("result")]),t._v("、"),s("code",[t._v("square")]),t._v(" 和 "),s("code",[t._v("f")]),t._v("。"),s("strong",[t._v("环境反映了变量的两个方面。首先，"),s("code",[t._v("outer")]),t._v(" 作用域链反映了静态作用域的嵌套结构。其次，执行上下文的栈反映了动态函数调用的过程。")])]),t._v(" "),s("h1",{attrs:{id:"_4-4-闭包与环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-闭包与环境"}},[t._v("#")]),t._v(" 4.4 闭包与环境")]),t._v(" "),s("p",[t._v("为了了解环境如何用于实现闭包，我们来看以下示例：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (A)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nassert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (B)")]),t._v("\n")])])]),s("p",[t._v("这里发生了什么？"),s("code",[t._v("add()")]),t._v(" 是一个返回函数的函数。当我们在 (B) 行调用 "),s("code",[t._v("add(3)(1)")]),t._v(" 时，第一个参数传递给 "),s("code",[t._v("add()")]),t._v("，第二个参数传递给 "),s("code",[t._v("add()")]),t._v(" 返回的函数。这能够正常运行的原因是 (A) 行创建的函数在离开其作用域后，仍然保持对其出生作用域的连接。这个连接使得相关的环境仍然存活，并且该函数仍然可以访问该环境中的变量 "),s("code",[t._v("x")]),t._v("（"),s("code",[t._v("x")]),t._v(" 在函数内部是自由变量）。")]),t._v(" "),s("p",[t._v("这种嵌套调用 "),s("code",[t._v("add()")]),t._v(" 的方式有一个优点：如果只调用 "),s("code",[t._v("add()")]),t._v(" 的第一层函数，你会得到一个 "),s("code",[t._v("x")]),t._v(" 参数已被填充的版本：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" plus2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nassert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("plus2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("将一个具有两个参数的函数转换为两个嵌套的单参数函数的过程称为"),s("strong",[t._v("柯里化（currying）")]),t._v("。因此，"),s("code",[t._v("add()")]),t._v(" 是一个柯里化函数。")]),t._v(" "),s("p",[s("strong",[t._v("仅填充部分参数的函数调用")]),t._v("称为"),s("strong",[t._v("偏应用（partial application）")]),t._v("（该函数尚未被完全应用）。函数的 "),s("code",[t._v(".bind()")]),t._v(" 方法执行偏应用。在上面的例子中，我们可以看到，如果一个函数是柯里化的，那么偏应用会变得很简单。")]),t._v(" "),s("h2",{attrs:{id:"_4-4-1-代码执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-1-代码执行"}},[t._v("#")]),t._v(" 4.4.1 代码执行")]),t._v(" "),s("p",[t._v("在执行以下代码时，我们会经历三次暂停：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("y")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 暂停 3：plus2(5)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 暂停 1：add(2)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" plus2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 暂停 2")]),t._v("\nassert"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("plus2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("具体过程如下：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("暂停 1")]),t._v(" – 在执行 "),s("code",[t._v("add(2)")]),t._v(" 期间（图 7）。")]),t._v(" "),s("li",[s("strong",[t._v("暂停 2")]),t._v(" – 在 "),s("code",[t._v("add(2)")]),t._v(" 执行完成之后（图 8）。")]),t._v(" "),s("li",[s("strong",[t._v("暂停 3")]),t._v(" – 在执行 "),s("code",[t._v("plus2(5)")]),t._v(" 期间（图 9）。")])]),t._v(" "),s("p",[s("strong",[t._v("图 7：闭包，暂停 1 – 执行 "),s("code",[t._v("add(2)")]),t._v(" 期间")])]),t._v(" "),s("p",[t._v("在此阶段，"),s("code",[t._v("add()")]),t._v(" 返回的函数已经存在（见右下角），并且它通过内部属性 "),s("code",[t._v("[[Scope]]")]),t._v(" 指向其出生环境。需要注意的是，"),s("code",[t._v("plus2")]),t._v(" 仍然处于"),s("strong",[t._v("暂时性死区（Temporal Dead Zone，TDZ）")]),t._v("，尚未初始化。")]),t._v(" "),s("div",{staticClass:"language-mermaid extra-class"},[s("pre",{pre:!0,attrs:{class:"language-mermaid"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("graph")]),t._v(" TD\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("subgraph")]),t._v(" 执行上下文栈\n    调用帧1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("调用帧"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" add"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("(2)))")]),t._v("\n    全局环境"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("((全局环境))")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n  调用帧1 "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[变量 x = 2]")]),t._v("\n  调用帧1 "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("-.->")]),s("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|[[Scope]]|")]),t._v(" 全局环境\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("subgraph")]),t._v(" 函数对象\n    add返回的函数"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("((匿名函数))")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n  add返回的函数 "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("-.->")]),s("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|[[Scope]]|")]),t._v(" 调用帧1\n")])])]),s("p",[s("strong",[t._v("图 8：闭包，暂停 2 – "),s("code",[t._v("add(2)")]),t._v(" 执行完成后")])]),t._v(" "),s("p",[t._v("在此阶段，"),s("code",[t._v("plus2")]),t._v(" 现在指向 "),s("code",[t._v("add(2)")]),t._v(" 返回的函数。该函数通过 "),s("code",[t._v("[[Scope]]")]),t._v(" 维持其出生环境（"),s("code",[t._v("add(2)")]),t._v(" 的环境）的存活。")]),t._v(" "),s("div",{staticClass:"language-mermaid extra-class"},[s("pre",{pre:!0,attrs:{class:"language-mermaid"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("graph")]),t._v(" TD\n  plus2"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[函数 plus2]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),s("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|[[Scope]]|")]),t._v(" add环境\n  add环境 "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[变量 x = 2]")]),t._v("\n")])])]),s("p",[s("strong",[t._v("图 9：闭包，暂停 3 – 执行 "),s("code",[t._v("plus2(5)")]),t._v(" 期间")])]),t._v(" "),s("p",[t._v("在此阶段，"),s("code",[t._v("plus2")]),t._v(" 的 "),s("code",[t._v("[[Scope]]")]),t._v(" 被用于设置新环境的 "),s("code",[t._v("outer")]),t._v("。这就是当前函数能够访问 "),s("code",[t._v("x")]),t._v(" 的方式。")]),t._v(" "),s("div",{staticClass:"language-mermaid extra-class"},[s("pre",{pre:!0,attrs:{class:"language-mermaid"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("graph")]),t._v(" TD\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("subgraph")]),t._v(" 执行上下文栈\n    plus2环境\n    add环境\n    顶层环境\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n  plus2环境 "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[变量 y = 5]")]),t._v("\n  plus2环境 "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("-.->")]),s("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|outer|")]),t._v(" add环境\n  add环境 "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[变量 x = 2]")]),t._v("\n")])])]),s("div",{staticClass:"language-mermaid extra-class"},[s("pre",{pre:!0,attrs:{class:"language-mermaid"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("graph")]),t._v(" TD\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("subgraph")]),t._v(" 执行上下文栈\n    调用帧1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("调用帧"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" add"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("(2)))")]),t._v("\n    全局环境"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("((全局环境))")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n  调用帧1 "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("--\x3e")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("[变量 x = 2]")]),t._v("\n  调用帧1 "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("-.->")]),s("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|[[Scope]]|")]),t._v(" 全局环境\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("subgraph")]),t._v(" 函数对象\n    add返回的函数"),s("span",{pre:!0,attrs:{class:"token text string"}},[t._v("((匿名函数))")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n  add返回的函数 "),s("span",{pre:!0,attrs:{class:"token arrow operator"}},[t._v("-.->")]),s("span",{pre:!0,attrs:{class:"token label property"}},[t._v("|[[Scope]]|")]),t._v(" 调用帧1\n")])])]),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[t._v("本文主要参考了 Exploringjs 网站的 Deep JS 一书 https://exploringjs.com/deep-js/ch_environments.html")]),t._v(" "),s("li",[t._v("图片中的 Lexical Environment 是执行上下文的一个属性，见 https://tc39.es/ecma262/#table-additional-state-components-for-ecmascript-code-execution-contexts")])]),t._v(" "),s("p",[t._v("Table 26: Additional State Components for ECMAScript Code Execution Contexts")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Component")]),t._v(" "),s("th",[t._v("Purpose")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("LexicalEnvironment")]),t._v(" "),s("td",[t._v("Identifies the "),s("a",{attrs:{href:"https://tc39.es/ecma262/#sec-environment-records",target:"_blank",rel:"noopener noreferrer"}},[t._v("Environment Record"),s("OutboundLink")],1),t._v(" used to resolve identifier references made by code within this "),s("a",{attrs:{href:"https://tc39.es/ecma262/#sec-execution-contexts",target:"_blank",rel:"noopener noreferrer"}},[t._v("execution context"),s("OutboundLink")],1),t._v(".")])]),t._v(" "),s("tr",[s("td",[t._v("VariableEnvironment")]),t._v(" "),s("td",[t._v("Identifies the "),s("a",{attrs:{href:"https://tc39.es/ecma262/#sec-environment-records",target:"_blank",rel:"noopener noreferrer"}},[t._v("Environment Record"),s("OutboundLink")],1),t._v(" that holds bindings created by "),s("a",{attrs:{href:"https://tc39.es/ecma262/#prod-VariableStatement",target:"_blank",rel:"noopener noreferrer"}},[t._v("VariableStatement"),s("OutboundLink")],1),t._v("s within this "),s("a",{attrs:{href:"https://tc39.es/ecma262/#sec-execution-contexts",target:"_blank",rel:"noopener noreferrer"}},[t._v("execution context"),s("OutboundLink")],1),t._v(".")])]),t._v(" "),s("tr",[s("td",[t._v("PrivateEnvironment")]),t._v(" "),s("td",[t._v("Identifies the "),s("a",{attrs:{href:"https://tc39.es/ecma262/#privateenvironment-record",target:"_blank",rel:"noopener noreferrer"}},[t._v("PrivateEnvironment Record"),s("OutboundLink")],1),t._v(" that holds "),s("a",{attrs:{href:"https://tc39.es/ecma262/#sec-private-names",target:"_blank",rel:"noopener noreferrer"}},[t._v("Private Names"),s("OutboundLink")],1),t._v(" created by "),s("a",{attrs:{href:"https://tc39.es/ecma262/#prod-ClassElement",target:"_blank",rel:"noopener noreferrer"}},[t._v("ClassElement"),s("OutboundLink")],1),t._v("s in the nearest containing class. null if there is no containing class.")])])])]),t._v(" "),s("ul",[s("li",[t._v("执行上下文的 Lexical Environment 指向的对象是一个 Environment Record，它有一个属性 "),s("code",[t._v("[[outerEnv]]")]),t._v(" 指向外层的环境（对于 Global Environment Record 它是 null）")])]),t._v(" "),s("blockquote",[s("p",[t._v("Every Environment Record has an [[OuterEnv]] field, which is either null or a reference to an outer Environment Record. This is used to model the logical nesting of Environment Record values. The outer reference of an (inner) Environment Record is a reference to the Environment Record that logically surrounds the inner Environment Record.")]),t._v(" "),s("p",[t._v("Environment Records are purely specification mechanisms and need not correspond to any specific artefact of an ECMAScript implementation.")])]),t._v(" "),s("ul",[s("li")])])}),[],!1,null,null,null);s.default=e.exports}}]);